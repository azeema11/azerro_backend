datasource db {
  provider = "postgresql" // or "sqlite" for local dev
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/// Represents different assistant modules available in the platform
model Assistant {
  id          String          @id @default(uuid())
  name        String          @unique @db.VarChar(50) // e.g. "finance", "health", etc.
  displayName String          @db.VarChar(100) // e.g. "Personal Finance", "Health Tracker"
  description String?         @db.VarChar(500)
  createdAt   DateTime        @default(now())
  users       UserAssistant[]
}

/// Junction table mapping users to activated assistants
model UserAssistant {
  id          String    @id @default(uuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  assistant   Assistant @relation(fields: [assistantId], references: [id])
  assistantId String
  activatedAt DateTime  @default(now())
  settings    Json? // customizable settings per assistant

  @@unique([userId, assistantId])
}

model User {
  id            String          @id @default(uuid())
  name          String          @db.VarChar(100)
  email         String          @unique @db.VarChar(255)
  passwordHash  String          @db.VarChar(255)
  createdAt     DateTime        @default(now())
  transactions  Transaction[]
  holdings      Holding[]
  bankAccounts  BankAccount[]
  plannedEvents PlannedEvent[]
  budgets       Budget[]
  assistants    UserAssistant[]
  monthlyIncome Decimal?        @db.Decimal(15, 2)

  baseCurrency String @default("INR") @db.VarChar(3) // User's preferred reporting currency
  Goal         Goal[]
}

model Holding {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String

  platform  String    @db.VarChar(50) // e.g., Zerodha, Binance, Robinhood
  ticker    String    @db.VarChar(20) // e.g., INFY.NS, AAPL, BTC
  assetType AssetType // STOCK, CRYPTO, METAL
  name      String    @db.VarChar(100)

  quantity        Decimal  @db.Decimal(20, 8) // High precision for crypto
  avgCost         Decimal  @db.Decimal(15, 4) // In holdingCurrency
  holdingCurrency String   @db.VarChar(3) // e.g., INR, USD, USDT
  lastPrice       Decimal  @default(0) @db.Decimal(15, 4) // Also in holdingCurrency
  lastChecked     DateTime @updatedAt

  convertedValue Decimal @default(0) @db.Decimal(15, 2) // Calculated value in baseCurrency

  @@unique([id, userId])
  @@index([userId])
  @@index([userId, assetType])
  @@index([ticker])
  @@index([platform])
}

model Transaction {
  id          String          @id @default(uuid())
  user        User            @relation(fields: [userId], references: [id])
  userId      String
  amount      Decimal         @db.Decimal(15, 2)
  currency    String          @db.VarChar(3)
  category    Category
  type        TransactionType @default(EXPENSE)
  description String?         @db.VarChar(500)
  date        DateTime

  bankAccount   BankAccount? @relation(fields: [bankAccountId], references: [id])
  bankAccountId String?

  // Reverse relation for PlannedEvent.completedTxId
  completedPlannedEvent PlannedEvent?

  @@unique([id, userId])
  @@index([userId, type])
  @@index([userId, date])
  @@index([userId, category])
  @@index([date])
}

model BankAccount {
  id        String      @id @default(uuid())
  user      User        @relation(fields: [userId], references: [id])
  userId    String
  name      String      @db.VarChar(100)
  type      AccountType
  balance   Decimal     @db.Decimal(15, 2)
  currency  String      @db.VarChar(3)
  createdAt DateTime    @default(now())

  transactions Transaction[]

  @@unique([id, userId])
  @@index([userId])
  @@index([userId, type])
}

model PlannedEvent {
  id            String      @id @default(uuid())
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  name          String      @db.VarChar(200)
  targetDate    DateTime
  estimatedCost Decimal     @db.Decimal(15, 2)
  savedSoFar    Decimal     @default(0) @db.Decimal(15, 2)
  currency      String      @db.VarChar(3) // e.g., INR, USD
  category      Category
  recurrence    Periodicity @default(ONE_TIME)
  createdAt     DateTime    @default(now())
  completed     Boolean     @default(false)

  // Foreign key relation to Transaction
  completedTx   Transaction? @relation(fields: [completedTxId], references: [id])
  completedTxId String?      @unique // link to generated transaction if completed

  @@unique([id, userId])
  @@index([userId, completed])
  @@index([userId, targetDate])
  @@index([userId, category])
  @@index([targetDate])
}

model Budget {
  id        String      @id @default(uuid())
  user      User        @relation(fields: [userId], references: [id])
  userId    String
  category  Category
  amount    Decimal     @db.Decimal(15, 2) // budget amount per period
  period    Periodicity // WEEKLY, MONTHLY, ANNUAL
  createdAt DateTime    @default(now())

  @@unique([id, userId])
  @@index([userId])
  @@index([userId, category])
  @@index([userId, period])
}

enum Category {
  GROCERY
  UTILITIES
  TRANSPORTATION
  CLOTHING
  ENTERTAINMENT
  RENT
  HEALTHCARE
  OTHER
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum AssetType {
  STOCK
  CRYPTO
  METAL
}

enum AccountType {
  SAVINGS
  CURRENT
  CREDIT_CARD
  CASH
}

enum Periodicity {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  HALF_YEARLY
  YEARLY
  ONE_TIME
}

model CurrencyRate {
  id        String   @id @default(uuid())
  base      String   @db.VarChar(3) // e.g., USD
  target    String   @db.VarChar(3) // e.g., INR
  rate      Decimal  @db.Decimal(18, 8) // High precision for exchange rates
  updatedAt DateTime @updatedAt

  @@unique([base, target])
}

model CurrencyRateHistory {
  id         String   @id @default(uuid())
  base       String   @db.VarChar(3) // e.g., USD
  target     String   @db.VarChar(3) // e.g., INR
  rate       Decimal  @db.Decimal(18, 8) // High precision for exchange rates
  rateDate   DateTime // The date this rate was valid for
  createdAt  DateTime @default(now())

  @@unique([base, target, rateDate])
  @@index([base, target])
  @@index([rateDate])
}

model Goal {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String

  name         String   @db.VarChar(200)
  description  String?  @db.VarChar(1000)
  targetAmount Decimal  @db.Decimal(15, 2)
  savedAmount  Decimal  @default(0) @db.Decimal(15, 2)
  currency     String   @db.VarChar(3) // e.g., INR, USD
  targetDate   DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  completed    Boolean  @default(false)

  @@unique([id, userId])
  @@index([userId])
  @@index([userId, completed])
  @@index([userId, targetDate])
  @@index([targetDate])
}
